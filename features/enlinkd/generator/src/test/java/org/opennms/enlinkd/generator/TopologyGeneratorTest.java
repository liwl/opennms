/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2019 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.enlinkd.generator;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;

import java.util.Set;

import org.junit.Test;
import org.opennms.netmgt.dao.api.GenericPersistenceAccessor;
import org.opennms.netmgt.topologies.service.api.OnmsTopology;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyConsumer;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyDao;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyEdge;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyMessage;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyPort;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyRef;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyUpdater;
import org.opennms.netmgt.topologies.service.api.OnmsTopologyVertex;

public class TopologyGeneratorTest {
    private int numVerticesUpdated = 0;
    private int numPortsUpdated = 0;
    private int numEdgesUpdated = 0;

    /**
     * This test verifies that any topology generated by the topology generator is sent to the topology DAO as a series
     * of topology updates.
     */
    @Test
    public void shouldUpdateTopologyDao() {
        int numNodes = 10;
        int numPorts = 180;
        int numLinks = 10;
        TopologyGenerator.ProgressCallback mockProgressCallback = mock(TopologyGenerator.ProgressCallback.class);
        TopologyGenerator generator = TopologyGenerator.builder()
                .persister(new TopologyPersister(mock(GenericPersistenceAccessor.class), mockProgressCallback))
                .progressCallback(mockProgressCallback)
                .build();
        TopologySettings settings = TopologySettings.builder()
                .amountElements(numNodes)
                .amountIpInterfaces(20)
                .amountLinks(numLinks)
                .amountNodes(numNodes)
                .amountSnmpInterfaces(numPorts)
                .protocol(TopologyGenerator.Protocol.ospf)
                .topology(TopologyGenerator.Topology.ring)
                .topologyDao(new TestOnmsTopologyDao())
                .build();

        generator.generateTopology(settings);

        assertThat(numVerticesUpdated, is(equalTo(numNodes)));
        assertThat(numPortsUpdated, is(equalTo(numPorts)));
        assertThat(numEdgesUpdated, is(equalTo(numLinks / 2)));
    }

    public class TestOnmsTopologyDao implements OnmsTopologyDao {
        @Override
        public OnmsTopology getTopology(String protocol) {
            return null;
        }

        @Override
        public Set<String> getSupportedProtocols() {
            return null;
        }

        @Override
        public void register(OnmsTopologyUpdater updater) {
        }

        @Override
        public void unregister(OnmsTopologyUpdater updater) {
        }

        @Override
        public void subscribe(OnmsTopologyConsumer consumer) {
        }

        @Override
        public void unsubscribe(OnmsTopologyConsumer consumer) {
        }

        @Override
        public void update(OnmsTopologyUpdater updater, OnmsTopologyMessage message) {
            OnmsTopologyRef ref = message.getMessagebody();

            if (ref instanceof OnmsTopologyVertex) {
                numVerticesUpdated++;
            } else if (ref instanceof OnmsTopologyPort) {
                numPortsUpdated++;
            } else if (ref instanceof OnmsTopologyEdge) {
                numEdgesUpdated++;
            }
        }
    }
}
